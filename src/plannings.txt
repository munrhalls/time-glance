// component App contains state of all cards
    // basic idea - when card is added to a project, state of cards updates
    // basic idea - when card is dragged & dropped to a day, state of cards updates
    // basic idea - in both cases, update is triggered via hook method, which is passed down by props
    // basic idea - in both cases, card's event information is passed up via hook method
    // basic idea - in both cases, state is updated at the top level by the event's information
    // basic idea - in both cases, state is updated via the hook method which works on the state of all cards everywhere in the app
    // basic idea - all other components only receive cards data from state of all cards, via props and that's how all card updates happen, from adding and deleting, to modifying card's color, size and so on, all the way to giving a specific day an updated data about the cards it needs to display and how 
    // cards data is the common element, the kernel of this app, and it resides in one place, one object, in the topmost component, and is modified, updated and passed to and from, only that one place and nowhere else
    // assumption - this will result in a large object tree, which is the minus
    // assumption - this will also result in minimal confusion and high simplicity of doing anything and everything in this app, since everything in it revolves around cards
    // assumption - the trade off seems worth it - large object tree and long access pathways (many sub-sub-sub objects/arrays) - but whatever problems or complications arise, they are only in that one place which has one explicit job, and that job is to manage the state of all cards in the app
    // this seems reasonable and common sense - any problems that may arise from this, are *only* problems about access (object.object.object.array[id].object.array[id], long pathways..) and the railways up from event hooks, and down from state updates (these two are simple, as they are always just cards variable)
    
    // if I were to split state, day would have its state, projects would have their state, well - that immediately looks much more unclear, less simple, more convoluted

    // OR

    // in the above component, resides state of all days
    // this state is an array
    // each entry in the array is an object
    // each object's property is day's id
    // each property's value is array of cards
    // each entry in array of cards is an object
    // each object contains card's id, card's project, card's project color, card's duration,  card's 
    // the basic idea is that specific day is identified by id
    // then, this specific day has a state of cards
    // state of cards s


    // 1. state of all cards statuses in component above
    // 2. component above = App
    // 3. pass setState hook method via props to here from app

  
    // 4. provide id to setState hook
    // 5. setState hook method updates the card statuses array
    // 6. it does it by map method
    // 7. map iterates the entire array
    // 8. each iteration compares item id to card id
    // 9. if it matches, inside conditional it returns cardId with isScheduled set to true